generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String               @id @default(dbgenerated("nanoid()")) @db.Char(12)
  name                 String
  email                String               @unique
  profile_picture      String?
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  role                 UserRole             @default(USER)
  organization_members OrganizationMember[]
  activities           Activity[]

  @@map("users")
}

model Organization {
  id                String               @id @default(dbgenerated("nanoid()")) @db.Char(12)
  name              String
  description       String?
  subscription_plan SubscriptionPlan
  created_at        DateTime             @default(now())
  updated_at        DateTime             @updatedAt
  members           OrganizationMember[]
  products          Product[]
  rewards           Reward[]
  subscription      Subscription?

  @@map("organizations")
}

model OrganizationMember {
  id              String           @id @default(dbgenerated("nanoid()")) @db.Char(12)
  user_id         String
  organization_id String
  role            OrganizationRole @default(MEMBER)
  joined_at       DateTime         @default(now())
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt

  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@unique([user_id, organization_id])
  @@map("organization_members")
}

model Product {
  id              String   @id @default(dbgenerated("nanoid()")) @db.Char(12)
  name            String
  description     String?
  category        String
  organization_id String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  qrs             Qr[]

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@map("products")
}

model Qr {
  id         String   @id @default(dbgenerated("nanoid()")) @db.Char(12)
  product_id String
  code       String   @unique
  status     QrStatus
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("qrs")
}

model Reward {
  id              String   @id @default(dbgenerated("nanoid()")) @db.Char(12)
  organization_id String
  description     String?
  points_required Int
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@map("rewards")
}

model Activity {
  id         String       @id @default(dbgenerated("nanoid()")) @db.Char(12)
  user_id    String
  type       ActivityType
  details    Json?
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Subscription {
  id              String             @id @default(dbgenerated("nanoid()")) @db.Char(12)
  organization_id String             @unique
  plan            SubscriptionPlan
  status          SubscriptionStatus
  start_date      DateTime
  end_date        DateTime?
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum UserRole {
  USER
  SUPER_ADMIN
}

enum OrganizationRole {
  ADMIN
  MEMBER
  EDITOR
}

enum QrStatus {
  ACTIVE
  INACTIVE
  REDEEMED
}

enum ActivityType {
  SCAN
  REDEEM
  TRANSFER
}

enum SubscriptionPlan {
  HOBBY
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}
